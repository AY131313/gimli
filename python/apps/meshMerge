#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
This program is part of pygimli
Visit http://www.resistivity.net for further information or the latest version.
"""

import sys
import os
import pygimli as pg


def main(argv):
    
    import argparse

    # intialisize parser
    parser = argparse.ArgumentParser(description="Merge two meshes")

    # define some options (better import from defaultParser)
    parser.add_argument("-v", "--verbose", dest="verbose", action="store_true",
                        help="Be verbose")
    parser.add_argument("--debug", dest="debug", action="store_true",
                        help="debug mode")
    parser.add_argument("-o", dest="outFileName", type=str,
                        help="Filename for the resulting mesh.",
                        default='none')
      
    parser.add_argument('mesh1')
    parser.add_argument('mesh2')

    args = parser.parse_args()
    if args.debug:
        pg.setDebug(args.debug)
        
    if args.verbose:
        print(args)
    
    meshname1 = args.mesh1
    meshname2 = args.mesh2


    (outfileBody, fileExtension) = os.path.splitext(args.outFileName)

    # 2d should default here, since most users will merge 2d meshes. for 3d we
    # need an option here->Ca
    m1 = pg.Mesh(2)
    m1.load(meshname1)
    m2 = pg.Mesh(2)
    m2.load(meshname2)

    #if args.localCoordinates:
        #xmin=min(m1.xmin(), m2.xmin())
        #ymin=min(m1.ymin(), m2.ymin())
        #zmin=min(m1.zmin(), m2.zmin())

        #m1.translate((-xmin, -ymin, -zmin))
        #m2.translate((-xmin, -ymin, -zmin))

    if args.verbose:
        print(meshname1, m1)
        print(meshname2, m2)

    mesh = pg.Mesh(m1)

    for c in m2.cells():
        mesh.copyCell(c)

    for key in list(mesh.exportDataMap().keys()):
        d = mesh.exportDataMap()[key]
        if args.verbose:
            print(d)
            
        d.resize(mesh.cellCount())
        d.setVal(m1.exportDataMap()[key], 0, m1.cellCount())
        d.setVal(m2.exportDataMap()[key], m1.cellCount(),
                 m1.cellCount() + m2.cellCount())
        mesh.addExportData(key, d)

    #mesh.translate((xmin, ymin, zmin))
    
    if args.verbose:
        print(mesh)
        print("write bms: ", outfileBody + ".bms")

    if outfileBody.find('.vtk'):
        mesh.exportVTK(outfileBody)
    else:
        mesh.saveBinaryV2(outfileBody)


if __name__ == "__main__":
    main(sys.argv[1:])
