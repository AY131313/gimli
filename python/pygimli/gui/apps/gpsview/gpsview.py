# -*- coding: iso-8859-1 -*-

import wx

from pygimli.gui.base import AppResource
from pygimli.gui.wxmpl import AppResourceWxMPL
from pygimli.gui.resources import loadIcon, MakeDisabledBitmap

import pyproj
from pygimli.importexport import readGPX
from pygimli.mplviewer import underlayMap

class GPSViewerApp( AppResourceWxMPL ):
    ''
    ' Main Class for GPS Viewer App. Default render window is a wxmpl panel'
    ''
    def __init__( self, parent, rendererSlot, propertyInspectorSlot ):
        AppResourceWxMPL.__init__( self, parent, rendererSlot, propertyInspectorSlot )
        
        # set the name of this application that appears to the resource tree
        self.setName("GPS Viewer")
        
        ## optionaly load content informations for this application, generated by an gui-builder that wrote xrc-files
        ## eg. wxFormBuilder, __file__ is needed to find the xrc-file 
        self.loadXRC( 'gpsview.xrc', __file__ )
        
        ## register a menu to the main-MenuBar,
        ## using this function ensures that this menu will be shown/hiden respective to the activate status of the application
        self.mbCoordinatesMenu = self.createMainMenu( '&Coordinates' )
        
        ## create an item to the Coordinates menu
        self.createMenuItem( self.mbCoordinatesMenu
                                    , name = "Export ASCII"
                                    , help = 'auto'
                                    , function = self.exportAscii )
        ## create another item to the Coordinates menu
        self.createMenuItem( self.mbCoordinatesMenu
                                    , name = "Export UTM"
                                    , help = 'auto'
                                    , function = self.exportUTM )
                                    
        ## the application has some properties that can be altered by the property inspector (PI), loaded and saved
        #self.titleTextProp = self.appendProperty( "Title", default = 'unknown', valType = str )
                
        self.vendorProp = self.appendProperty( "MapVendor", valType = unicode, default = 'Open Street Map' )
        
        # define local data after your needs
        self.gpsWPTs = None
    
    def createPropertyPanel( self, parent ):
        ''
        ' Define and return panel that is shown in the property-inspector (PI) '
        ' The panel will post created at the first call '
        ''

        # create a Notebook for the PI and add the content for the panel with the name piGPSViewerApp defined in gpsview.xrc
        panel = self.createPropertyInspectorNoteBookPanel( parent, 'piGPSViewerApp', title = 'GPS Viewer' )
            
        self.vendorProp.setCtrl( ctrl = wx.xrc.XRCCTRL( panel, 'gpsViewerVendorRadioBox' )
                                        , ctrlEvent = wx.EVT_RADIOBOX
                                        , targetFunct = self.setMapVendor )
                                       
        # define property behaviour
        #self.titleTextProp.setCtrl( ctrl = wx.xrc.XRCCTRL( panel,  'TitleTextCtrl' ) # name of the control in xrc
                                        #, ctrlEvent = wx.EVT_TEXT                        # the event that should observed
                                        #, targetFunct = self.setTitle )                  # the callback when the event is called
        
        return panel
        
    def drawData_( self ):
        ''
        ' Define what we have to be drawn (needed from base class) is called while a draw event is fired '
        ''
        
        proj = self.getProjection()

        for p in self.gpsWPTs:
            x,y = proj( p[0], p[1] )
            self.axes.plot( x, y, '.', markersize = 18 )

        underlayMap( self.axes, proj, vendor = self.vendorProp(), zoom = -1, verbose = True )
    
        self.axes.grid()
        
    def setMapVendor( self, value = None ):
        print self.vendorProp()
        self.draw()
        
    def getProjection( self ):
        ''
        ' Create and return the current projection'
        ''
        #return pyproj.Proj( proj = 'utm', zone=29, ellps = 'WGS84' )
        return pyproj.Proj( proj = 'utm', zone = 32, ellps = 'WGS84' )
        
    def openFile( self, files = None ):
        ''
        ' Load data here'
        ''
        self.gpsWPTs = readGPX( files )
        self.draw()
    
    def exportUTM( self ):
        ''
        'Export coordinates in UTM format'
        ''
        pass

    def exportAscii( self ):
        ''
        'Export LonLat coordinates in ASCII format'
        ''
        pass