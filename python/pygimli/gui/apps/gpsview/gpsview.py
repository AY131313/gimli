# -*- coding: iso-8859-1 -*-

import wx

from pygimli.gui.base import AppResource
from pygimli.gui.wxmpl import AppResourceWxMPL
from pygimli.gui.resources import loadIcon, MakeDisabledBitmap

import pyproj
from pygimli.importexport import readGPX
from pygimli.mplviewer import underlayMap

def findUTMZone( lon, lat ):
    """
     find utm zone for lon and lat values. Return str(zone)+hemisphere
     lon -180 -- -174 -> 1 ... 174 -- 180 -> 60 
     lat < 0 hemisphere = S, > 0 hemisphere = N 
    """
    zone = ( int( lon ) + 180 ) / 6 + 1
    if lat > 0:
        return str( zone ) + 'N'
    else:
        return str( zone ) + 'S'
    
# def findUTMZone( ... )


class GPSViewerApp( AppResourceWxMPL ):
    """ Main Class for GPS Viewer App. Default render window is a wxmpl panel """
    
    def __init__( self, parent, rendererSlot, propertyInspectorSlot ):
        AppResourceWxMPL.__init__( self, parent, rendererSlot, propertyInspectorSlot )
        
        # set the name of this application that appears to the resource tree
        self.setName("GPS Viewer")
        
        ## optionaly load content informations for this application, generated by an gui-builder that wrote xrc-files
        ## eg. wxFormBuilder, __file__ is needed to find the xrc-file 
        self.loadXRC( 'gpsview.xrc', __file__ )
        
        ## register a menu to the main-MenuBar,
        ## using this function ensures that this menu will be shown/hiden respective to the activate status of the application
        self.mbCoordinatesMenu = self.createMainMenu( '&Coordinates' )
        
        ## create an item to the Coordinates menu
        self.createMenuItem( self.mbCoordinatesMenu
                                    , name = "Export ASCII"
                                    , help = 'auto'
                                    , function = self.exportAscii )
        ## create another item to the Coordinates menu
        self.createMenuItem( self.mbCoordinatesMenu
                                    , name = "Export UTM"
                                    , help = 'auto'
                                    , function = self.exportUTM )
                                    
        ## the application has some properties that can be altered by the property inspector (PI), loaded and saved
        #self.titleTextProp = self.appendProperty( "Title", default = 'unknown', valType = str )
                
        self.vendorProp = self.appendProperty( "MapVendor", valType = unicode, default = 'Open Street Map' )
        self.utmZone = self.appendProperty( "UTMZone", valType = str, default = '' )
        
        # define local data after your needs
        self.gpsWPTs = None
        self.newXLimits = None
        self.newYLimits = None
    
    def createPropertyPanel( self, parent ):
        """
         Define and return panel that is shown in the property-inspector (PI) 
         The panel will post created at the first call '
        """

        # create a Notebook for the PI and add the content for the panel with the name piGPSViewerApp defined in gpsview.xrc
        panel = self.createPropertyInspectorNoteBookPanel( parent, 'piGPSViewerApp', title = 'GPS Viewer' )
            
        # bind properties on controls and targetfunctions
        self.vendorProp.setCtrl( ctrl = wx.xrc.XRCCTRL( panel, 'gpsViewerVendorRadioBox' )
                                        , ctrlEvent = wx.EVT_RADIOBOX
                                        , targetFunct = self.draw )
                                        
        self.utmZone.setCtrl( ctrl = wx.xrc.XRCCTRL( panel, 'gpsViewerUTMZone' )
                                        , ctrlEvent = wx.EVT_KILL_FOCUS
                                        , targetFunct = self.draw )
                                       
        return panel

    def onZoomChanged( self ):
        self.newXLimits = self.axes.get_xlim()
        self.newYLimits = self.axes.get_ylim()
        self.draw()

    def onPanChanged( self ):
        self.newXLimits = self.axes.get_xlim()
        self.newYLimits = self.axes.get_ylim()
        self.draw()
        
    def drawData_( self ):
        """ Define what we have to be drawn (needed from base class) is called while a draw event is fired """
        
        proj = self.getProjection( )

        for p in self.gpsWPTs:
            x,y = proj( p[0], p[1] )
            self.axes.plot( x, y, 'x', markersize = 12, color = 'blue' )

        if self.newXLimits is not None:
            self.axes.set_xlim( self.newXLimits )
            self.axes.set_ylim( self.newYLimits )

        underlayMap( self.axes, proj, vendor = self.vendorProp(), zoom = -1, pixelLimit = [1500, 1024], verbose = True )
    
        self.axes.grid()
        
    def getProjection( self ):
        """ Create and return the current projection """
        
        if self.utmZone().find('S'):
            hemisphere='south'
            false_easting=0
            false_northing=10000000
        else:
            hemisphere='north'
            false_easting=500000
            false_northing=0
                
        return pyproj.Proj( proj = 'utm', zone = self.utmZone(), ellps = 'WGS84' )
        
    def openFile( self, files = None ):
        """ Load data here """
        self.gpsWPTs = readGPX( files )
        self.utmZone.setVal( findUTMZone( self.gpsWPTs[0][0], self.gpsWPTs[0][1] ) )
        self.draw()
    
    def exportUTM( self ):
        """Export coordinates in UTM format"""
        pass

    def exportAscii( self ):
        """Export LonLat coordinates in simple column separated list"""
        pass