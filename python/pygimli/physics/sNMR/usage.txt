MRS-Block-QT-Inversion

0. Create a script in editor or spyder, setup pygimli PYTHONPATH

1. Import the MRS class (holding data and doing inversion)

from mrs import MRS # needs mrs.py, nothing else

Additionally, numpy and pygimli (although used inside) might be useful to import

import numpy as np # numerics library (like Matlab Basic module)
import pygimli as pg # gimli library doing inversion etc.
import matplotlib.pyplot as plt # plotting like in matlab

Beginners are recommended to use the interactive model (as in Matlab)

plt.ion() # interactive mode on

2. Create an MRS class (empty or directly with file/folder)

mrs = MRS() # empty class
mrs = MRS('K1.mrsi') # extracts all from MRSmatlab inversion format
# possible option defaultNoise (in V) if error cube is zero
mrs = MRS('dirname') # reads separate ascii files (Borkum stage)
# inside datacube.dat,errorcube.dat,KR.bmat,KI.bmat,zkernel.vec ar needed

Alternatively another kernel might be loaded by

mrs.loadKernel('file.mrsk')

Of course, several instanced can be created/used parallel.

3. Have a look at the data

print mrs # prints out number of q, t and layers

mrs.showDataAndError() # plots data and error cube

5. Setup some general options

Before the inversion, some options might be set by mrs.opt=...
The default parameter ranges are sufficiently wide

lowerbound=(0.1,0.0,0.02) - lower boundaries
upperbound=(100.,0.45,1.0) - upper boundaries

More important might be the starting values (homogeneous)

startval=(10.,0.3,0.2) - starting values for d,wc,T2*

6. Run inversion

mrs.run(nlay) # number of layers, possible options are

lam=100 - initial regularization strength
startvec - own starting vector (N*3-1) containing
           (d1,...,dN-1,wc1,...,wcN,T1,...TN)
uncertainty=False - do uncertainty analysis (chi^2 bounds)

to have more control on the inversion one might alternatively call

INV = mrs.createInv() # with the same parameters as for run

and set up GIMLi inversion options (see GIMLi API documentation)

mrs.run()

7. Have a look at the results

fig, ax = mrs.showResult() # only theta(z) and T2*(z), or

fig, ax = mrs.showResultAndFit() # with data and model response

Plotting keyword arguments (colors, line widths etc.) may be passed.

Figure and axes array might be use to refine plots or save

ax[0].text(0.25,10.5,'silt layer') # see matplotlib api
fig.save(filename) # file type from extension (e.g. pdf,eps,png,svg)

8. Save result in a column file containing
   z,theta,T2*[,zL,zU,thetaL,thetaU,T2*L,T2U]

mrs.saveResult(filename)

At any later stage a result can be loaded using

mrs.loadResult(filename)

and plotted or whatever.

A.) The Model covariance matrix (MCM) can be obtained by

var, MCMs = mrs.calcMCM()

var..variances (square roots of diagonal)
MCMs..scaled MCM matrix for displaying with
Note that the variance only make sense if chi^2 is around 1.

im=plt.imshow(MCMs,cmap='RdBu',interpolation='nearest')
im.set_clim(-1.0,1.0) # blue=-1,white=0,red=1
plt.colorbar()

