GIMLi - Geophysical Inversion and Modelling Library
        an open-source multi-method library for solving inverse and forward tasks

Prerequisites
=============

    . subversion
    . gcc
        tested: gentoo x86_64: gcc-4.4.5, gcc-4.5.3, gcc-4.5.4
                OpenSuse 11.4 x86_64: gcc-4
                Debian 3.2.46-1 x86_64: gcc-4.7.2
                MinGW32: gcc-4.6.2/4
                MinGW64: gcc-4.5.4 (without python bindings)
                
    . SuiteSparse http://www.cise.ufl.edu/research/sparse/SuiteSparse/
        tested: SuiteSparse-3.7.1.tar.gz
    . triangle http://www.cs.cmu.edu/~quake/triangle.html


#### Example Installation on Windows ####

Console 



#### Example Installation on Vanilla Ubuntu ####

For sure you will need subversion to get the source files and some things for the tool-chain

    sudo apt-get install subversion gnu-standards autoconf libtool

Create a directory for your installation, e.g., $HOME/src

    mkdir -p ~/src
    cd src
    mkdir -p gimli
    cd gimli

Checkout the current sources for libgimli:
    
    svn checkout https://svn.code.sf.net/p/libgimli/code/trunk libgimli

Getting necessary or optional external libraries. We need suitesparse and triangle. If they are not installed system-wide we provide a small script to obtain them.

    cd libgimli
    make -C external/

Now we can prepare the build:

    ./autogen.sh
 

*to be continued ..........................*

sudo apt-get install libboost-all-dev libblas-dev liblapack-dev cmake git 

sudo apt-get install libcppunit-dev

sudo apt-get install libprocps0-dev

sudo apt-get install python-matplotlib



if 'sh COMMAND.sh' complains about missing pushd or popd try 'bash COMMAND.sh'


Dependencies for python bindings
================================

Python bindings are generally a good idea because some tools depend on it. 
If you just want the libgimli library you can skip this part

we need gccxml, pygccxml and pyplusplus

bash libgimli/trunk/python/buildScripts/buildToolChain.sh


Install via cmake
=================

We test a new build system using cmake http://www.cmake.org/ that hopefully supersede the most steps above.
In the first, cmake provide out of source build so we recommend using a build directory beside the trunk path:

    gimli/trunk
    gimli/build

    cd build

####Linux systems####
For *Linux* user prepare and configure the build
    
    cmake ../trunk

To build the library just run make
    
    make

####Windows i.e. Mingw systems####
For *Mingw* users it should be preferable to generate for msys makefiles

    cmake -D CMAKE_INSTALL_PREFIX=../gimli-install -G 'MSYS Makefiles' ../trunk

cmake provide interactive configuration and fine tuning with. Window user will probably adjust the boost-include and boost-library paths.

    cmake-gui ../trunk #for MS Windows user

To build the library just run make
    
    make

####Interesting make targets####

You may want to build python bindings by by running:

    make pygimli

You can test your build:

    make check

Of course the test will be very silent if you don't have cppunit installed.

If you have doxygen installed, you can create the api documentation:

    make html


####Using cmake with CodeBlocks####













Tested with:
    gentoo x86_64 gcc-4.4.5, gcc-4.5.3, gcc-4.5.4
	OpenSuse 11.4 x86_64 gcc-4
    mingw win32 gcc-4.6.2/4 (gcc-4.7.0 DOES NOT WORK!!!!! strange segfault while dll call)
    mingw win64 gcc-4.5.4 (without python bindings)


BUILD (for Windows systems)

Please look into the directory mingw and the README file therein

BUILD (for posix systems such as Linux, Unix, MacOS):

Prerequisites:
You will need at least (incomplete for now):
	automake>=1.11
	gcc>=4.4.5 (just for some boost stuff that uses long long)
	...

For the first time after initial svn checkout:

./autogen.sh
make

If you install from source-package
./configure
make

After further svn update:
make 


OPTIONAL EXTERNALS:

for the testsuite
cppunit (http://sourceforge.net/projects/cppunit)

support for light-weight linear solver (LDL):
amd (http://www.cise.ufl.edu/research/sparse/amd/)
ldl (http://www.cise.ufl.edu/research/sparse/ldl/)

support for advanced linear solvers:
blas                    
lapack                  
colamd                  
camd                    
cholmod                 
(http://www.cise.ufl.edu/research/sparse/SuiteSparse/)

support for 2d mesh-generation:
triangle                

You can build triangle and suitesparse by calling the Makefile in the external directory


Windows toolchain:

mingw-4.5.0 & msys-1.0.15
    automatic installer: http://sourceforge.net/projects/mingw/files/
    tested: mingw-get-inst-20100909.exe
    
codeblocks
    from: http://www.codeblocks.org/downloads/26
    tested: codeblocks-10.05-setup.exe
    change codeblocks toolchain (setting/Compiler & Debugger../) 
        to c:/mingw or MinGW64 base directory

cmake >=2.8.7		

Add boost include path to the build:

CPPFLAGS='-I /c/home/boost/include' ./configure


Step by step: what I did on vanilla win7-64bin:
win7-64.prof, gcc-4.6.1, boost-1.48.0, python-2.7.2	

install:
	mingw (mingw-get-inst-20111118.exe) (toolchain)
	TortoiseSVN-1.7.4.22459-x64-svn-1.7.2 (libgimli sources)
	>=cmake-2.8.7 (blas, lapack, gccxml)
	python-2.7.2 (python binding, boost)
	codeblocks-10.05-setup
	http://www.sliksvn.com/en/download (cmd-line tool for pygccxml)
--- reboot ---

adjust ~/.profile:

> export PATH=/c/python27:$PATH

choose an installation path
e.g.: (note, path might be created first)
> cd /c/user/$USER/src

Getting libgimli sources:

> svn co https://libgimli.svn.sourceforge.net/svnroot/libgimli/trunk libgimli

Install third party dependencies: triangle, suitesparse

> cd libgimli/externals
> make

Install third party dependencies: blas, lapack

> cd libgimli/externals
> make lapack

copy blas and lapack into libgimli/mingw path (why should we??)

Install third party dependencies: boost
	
> wget -nc -nd http://sourceforge.net/projects/boost/files/boost/1.48.0/boost_1_48_0.tar.gz
> tar -xzvf boost_1_48_0.tar.gz
(maybe some errors using tar at command line, choose total commander etc. instead)

fix boot sources that boost-python can be build

> sh libglimli/python/buildScripts/buildBoostWin32.sh

copy libboost-threads into libgimli/mingw path (why??)

build libgimli.dll by using codeblocks

> sh libglimli/python/buildScripts/buildToolChain.sh

build pygimli




